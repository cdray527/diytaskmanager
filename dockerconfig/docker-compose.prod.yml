networks:
    diytaskmanager-network:
        driver: bridge

volumes:
    diytaskmanager-postgresql-data:
        driver: local

services:
    dashboard:
        restart: always
        image: cdray527/diytaskmanager-dashboard:latest
        build:
            context: ../
            dockerfile: apps/frontend/dashboard/Dockerfile
            target: production
        container_name: diytaskmanager-dashboard
        depends_on:
            - api
        env_file:
            - ../.env
        environment:
            - NODE_ENV=production
        ports:
            - '4000:4000'
        networks:
            - diytaskmanager-network
        command: ['npm', 'run', 'start']
    api:
        restart: always
        image: cdray527/diytaskmanager-api:latest
        build:
            context: ../
            dockerfile: apps/backend/api/Dockerfile
            target: production
        container_name: diytaskmanager-api
        depends_on:
            - postgresql
        env_file:
            - ../.env
        environment:
            - NODE_ENV=production
        ports:
            - '3000:3000'
        networks:
            - diytaskmanager-network
        command: ['npm', 'run', 'start']
    postgresql:
        restart: always
        image: postgres:16
        container_name: diytaskmanager-postgresql
        ports:
            - '5432:5432'
        healthcheck:
            test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
            interval: 5s
            timeout: 2s
            retries: 20
        volumes:
            - diytaskmanager-postgresql-data:/var/lib/postgresql/data/
        networks:
            - diytaskmanager-network
